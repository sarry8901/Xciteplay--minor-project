{"version":3,"sources":["components/assets/logo.png","actions/errorActions.js","actions/types.js","actions/authActions.js","components/auth/RegisterModal.js","components/auth/Logout.js","actions/eventAction.js","reducers/eventReducer.js","reducers/errorReducer.js","reducers/authReducer.js","reducers/index.js","store.js","components/auth/LoginModal.js","components/EditProfileModal.js","components/AppHome.js","components/EventItem.js","components/EventList.js","components/eventModal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","returnErrors","msg","status","id","type","payload","clearErrors","tokenConfig","getState","token","auth","config","headers","RegisterModal","state","modal","name","email","password","password2","isOrganiser","toggle","props","setState","onChange","e","target","value","onSubmit","preventDefault","newUser","register","prevProps","this","error","isAuthenticated","NavLink","onClick","href","Modal","isOpen","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","className","Alert","color","Button","style","marginTop","block","Component","connect","dispatch","body","JSON","stringify","axios","post","then","res","data","window","location","reload","catch","err","response","Logout","logout","getEvents","setEventsLoading","get","console","log","joinEvent","event","put","deleteEvent","delete","initialState","items","loading","user","localStorage","getItem","isLoading","user_edit","combineReducers","item","action","filter","setItem","removeItem","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","LoginModal","login","EditProfileModal","_id","editUser","AppNavBar","authLinks","Col","Row","guestLinks","md","Navbar","dark","expand","NavbarBrand","src","require","width","NavbarToggler","Collapse","navbar","Nav","EventItem","onDeleteClick","onJoinClick","parse","user_id","user_name","event_name","TransitionGroup","map","sport_type","players_required","venue","additional_info","imageURL","start","CSSTransition","key","timeout","classNames","ListGroupItem","marginBottom","bind","class","EventList","Toast","success","Container","ListGroup","EventModal","newEvent","addEvent","organiserLinks","marginLeft","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.125ec867.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f85d70f8.png\";","import {GET_ERRORS, CLEAR_ERRORS} from './types';\r\n\r\n//RETURN ERRORS\r\nexport const returnErrors = (msg, status, id=null) => {\r\n    return{\r\n        type: GET_ERRORS,\r\n        payload: {msg, status, id}\r\n    };\r\n}\r\n\r\n//CLEAR ERRORS\r\nexport const clearErrors = () => {\r\n    return{\r\n        type: CLEAR_ERRORS,\r\n       \r\n    };\r\n}","export const GET_EVENTS = 'GET_EVENTS';\r\nexport const DELETE_EVENT = 'DELETE_EVENT';\r\nexport const ADD_EVENT = 'ADD_EVENT';\r\nexport const EVENTS_LOADING = 'EVENTS_LOADING';\r\n\r\nexport const GET_EVENT = 'GET_EVENT';\r\nexport const JOIN_EVENT = 'JOIN_EVENT';\r\n\r\nexport const USER_LOADING = 'USER_LOADING';\r\nexport const USER_LOADED = 'USER_LOADED';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\n\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\r\n\r\nexport const EDIT_SUCCESS = 'EDIT_SUCCESS';\r\n\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\nexport const GET_ERRORS = 'GET_ERRORS';\r\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';","import axios from 'axios';\r\nimport {returnErrors} from './errorActions';\r\nimport {\r\n    USER_LOADED,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_FAIL,\r\n    REGISTER_SUCCESS,\r\n    GET_EVENTS,\r\n    EDIT_SUCCESS\r\n\r\n} from \"./types\"\r\n\r\n//check token and load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n    //user loading\r\n    dispatch({type:USER_LOADING});\r\n    \r\n    axios.get('/api/auth/user', tokenConfig(getState))\r\n        .then(res => dispatch({\r\n            type:USER_LOADED,\r\n            payload: res.data\r\n        }))\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n            dispatch({\r\n                type:AUTH_ERROR\r\n            });\r\n        });\r\n};\r\n\r\n//Register user\r\nexport const register = ({ name, email, password, password2, isOrganiser}) => dispatch => {\r\n    //headers\r\n    const config = {\r\n        headers:{\r\n            'Content-Type':'application/json'\r\n        }\r\n    }\r\n    //request body\r\n    const body = JSON.stringify({name, email, password, password2,isOrganiser});\r\n    axios.post('/api/user/sign-up', body, config)\r\n        .then(res => {\r\n            dispatch({\r\n            type:REGISTER_SUCCESS,\r\n            payload: res.data\r\n            });\r\n            window.location.reload();\r\n        })\r\n        .catch(err=>{\r\n            dispatch(returnErrors(err.response.data, err.response.status,'REGISTER_FAIL'));\r\n            dispatch({\r\n                type:REGISTER_FAIL,\r\n\r\n            })\r\n        })\r\n}\r\n\r\n\r\n//Login user\r\nexport const login = ({ email, password}) => dispatch => {\r\n    //headers\r\n    const config = {\r\n        headers:{\r\n            'Content-Type':'application/json'\r\n        }\r\n    }\r\n    //request body\r\n    const body = JSON.stringify({email, password});\r\n    axios.post('/api/auth', body, config)\r\n        .then(res => {\r\n            dispatch({\r\n            type:LOGIN_SUCCESS,\r\n            payload: res.data\r\n        }); window.location.reload();\r\n       // dispatch({\r\n        //    type:GET_EVENTS,\r\n            //payload:res.data\r\n       // });\r\n    })\r\n        .catch(err=>{\r\n            dispatch(returnErrors(err.response.data, err.response.status,'LOGIN_FAIL'));\r\n            dispatch({\r\n                type:LOGIN_FAIL,\r\n\r\n            })\r\n        })\r\n}\r\n\r\n\r\n//Logout user \r\nexport const logout =() => {\r\n    return{\r\n        type:LOGOUT_SUCCESS\r\n    }\r\n}\r\n\r\n\r\n//setup config/headers and token\r\nexport const tokenConfig = getState => {\r\n    //getting token from local storage\r\n    const token = getState().auth.token;\r\n\r\n    //headers\r\n    const config = {\r\n        headers:{\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    //if token, add to headers\r\n    if(token){\r\n        config.headers['x-auth-token'] = token;\r\n    }\r\n    return config;\r\n}\r\n\r\n\r\n\r\n\r\nexport const editUser = (user) => (dispatch,getState) => {\r\n    \r\n  \r\n   // const body = JSON.stringify({name, email, isOrganiser});\r\n    const body = user;\r\n    console.log(user);\r\n    axios.post('/api/user/editUser', body, tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n            type:EDIT_SUCCESS,\r\n            payload: res.data\r\n            });\r\n         \r\n           \r\n        })\r\n        .catch(err=>{\r\n            dispatch(returnErrors(err.response.data, err.response.status,'EDIT_USER_FAIL'));\r\n            \r\n        })\r\n}","import React, {Component} from 'react';\r\nimport {\r\n    Button, \r\n    Modal, \r\n    ModalHeader, \r\n    ModalBody, \r\n\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    NavLink,\r\n    Alert\r\n} from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {register} from '../../actions/authActions';\r\nimport { clearErrors } from '../../actions/errorActions';\r\n\r\nclass RegisterModal extends Component{\r\n    state = {\r\n        modal:false,\r\n        name: '',\r\n        email:'',\r\n        password:'',\r\n        password2:'',\r\n        isOrganiser:'',\r\n        msg:[]\r\n    };\r\n    \r\n    static propTypes ={\r\n        isAuthenticated:PropTypes.bool,\r\n        error:PropTypes.object.isRequired,\r\n        register: PropTypes.func.isRequired,\r\n        clearErrors: PropTypes.func.isRequired\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        const {error, isAuthenticated} = this.props;\r\n        if(error != prevProps.error){\r\n            //check for register error\r\n            if(error.id === 'REGISTER_FAIL'){\r\n                this.setState({msg: [error.msg.name, error.msg.email, error.msg.password, error.msg.password2, error.msg.isOrganiser]});\r\n            }else{\r\n                this.setState({msg:null})\r\n            }\r\n        }\r\n        //if authenticated then close the modal\r\n        if(this.state.modal){\r\n            if(isAuthenticated){\r\n                this.toggle();\r\n            }\r\n        }\r\n    }\r\n    toggle = () => {\r\n        //to clear errors\r\n        this.props.clearErrors();\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        const {name, email, password, password2,isOrganiser} = this.state;\r\n\r\n        //create user object\r\n        const newUser = {\r\n            name, \r\n            email,\r\n            password,\r\n            password2,\r\n            isOrganiser\r\n        };\r\n        //attempting to register\r\n        this.props.register(newUser);\r\n\r\n    };\r\n    render(){\r\n        return(\r\n            <div>\r\n              <NavLink onClick={this.toggle} href=\"#\">\r\n                Register\r\n              </NavLink>\r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle = {this.toggle}\r\n                >\r\n                    <ModalHeader toggle={this.toggle}> Register</ModalHeader>\r\n                    <ModalBody>\r\n                        {/* {this.state.msg ? (<Alert color='danger'>{this.state.msg}</Alert>):null} */}\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"name\">Name</Label>\r\n                                    <Input\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    id=\"name\"\r\n                                    placeholder=\"Name\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.onChange}\r\n                                  \r\n                                    >\r\n\r\n                                    </Input>\r\n                                    {this.state.msg ? (<Alert color='danger'>{this.state.msg[0]}</Alert>):null}\r\n                                <Label for=\"email\">email</Label>\r\n                                    <Input\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    id=\"email\"\r\n                                    placeholder=\"email\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.onChange}\r\n                                    >\r\n\r\n                                    </Input>\r\n                                    {this.state.msg ? (<Alert color='danger'>{this.state.msg[1]}</Alert>):null}\r\n                                <Label for=\"password\">Password</Label>\r\n                                    <Input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"password\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.onChange}\r\n                                    >\r\n\r\n                                    </Input>\r\n                                    {this.state.msg ? (<Alert color='danger'>{this.state.msg[2]}</Alert>):null}\r\n                                <Label for=\"password2\">Confirm Password</Label>\r\n                                    <Input\r\n                                    type=\"password\"\r\n                                    name=\"password2\"\r\n                                    id=\"password2\"\r\n                                    placeholder=\"confirm password\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.onChange}\r\n                                    >\r\n\r\n                                    </Input>\r\n                                    {this.state.msg ? (<Alert color='danger'>{this.state.msg[3]}</Alert>):null}\r\n                              \r\n                                        <Label for=\"organiser\">\r\n                                            \r\n                                          &nbsp;&nbsp;  <Input\r\n                                            type=\"radio\"\r\n                                            name=\"isOrganiser\"\r\n                                            id=\"organiser\"\r\n                                            className=\"mb-3\"\r\n                                            value='true'\r\n                                            onChange={this.onChange}\r\n                                            >\r\n                                            \r\n                                            </Input>\r\n                                            Organiser\r\n                                        </Label>\r\n                                       <br/>\r\n                                        \r\n                                    \r\n                                        <Label for=\"player\">\r\n                                            \r\n                                        &nbsp;&nbsp;    <Input\r\n                                            type=\"radio\"\r\n                                            name=\"isOrganiser\"\r\n                                            id=\"player\"\r\n                                            className=\"mb-3\"\r\n                                            value='false'\r\n                                            onChange={this.onChange}\r\n                                            >\r\n                                            \r\n                                            </Input>\r\n                                            Player\r\n                                        </Label>\r\n                                        \r\n                                        {this.state.msg ? (<Alert color='danger'>{this.state.msg[4]}</Alert>):null}\r\n                                    \r\n                                    <Button\r\n                                    color =\"dark\"\r\n                                    style={{marginTop:'2rem'}} block\r\n                                    >\r\n                                        Register\r\n                                    </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n   isAuthenticated: state.auth.isAuthenticated,\r\n   error: state.error\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { register, clearErrors }\r\n)(RegisterModal);","import React, { Component, Fragment } from 'react';\r\n\r\nimport {logout} from '../../actions/authActions';\r\nimport {connect} from 'react-redux';\r\nimport { NavLink } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Logout extends Component {\r\n    static propTypes = {\r\n        logout: PropTypes.func.isRequired\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Fragment>\r\n                    <NavLink onClick={this.props.logout} href='#'> Logout</NavLink>\r\n                </Fragment>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null,\r\n    {logout})(Logout);","import {GET_EVENTS, DELETE_EVENT, ADD_EVENT, EVENTS_LOADING, GET_EVENT, JOIN_EVENT} from './types';\r\nimport axios from 'axios';\r\n\r\nimport {tokenConfig} from './authActions';\r\nimport {returnErrors} from './errorActions';\r\n\r\nexport const getEvents = () => (dispatch,getState) => {\r\n    dispatch(setEventsLoading());\r\n   \r\n    axios\r\n        .get('/api/events',tokenConfig(getState))\r\n        .then(res=>{\r\n            dispatch({\r\n                type:GET_EVENTS,\r\n                payload:res.data\r\n            });\r\n           \r\n            \r\n        })\r\n            \r\n        .catch(err => {\r\n            \r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n            console.log(err);\r\n        }\r\n            );\r\n};\r\n\r\nexport const getEvent = (id) => (dispatch,getState) => {\r\n    dispatch(setEventsLoading());\r\n \r\n    axios\r\n        .get(`/api/events/${id}`, tokenConfig(getState))\r\n        .then(res => \r\n            dispatch({\r\n                type: GET_EVENT,\r\n                payload: res.data\r\n            })\r\n        )\r\n        .catch(err => dispatch(returnErrors(err.response.data, err.response.status))\r\n            );\r\n};\r\n\r\nexport const addEvent = item => (dispatch,getState) => {\r\n    axios\r\n        .post('/api/events',item,tokenConfig(getState))\r\n        .then(res =>\r\n            dispatch({\r\n                type: ADD_EVENT,\r\n                payload: res.data\r\n            }))\r\n        .catch(err => dispatch(returnErrors(err.response.data, err.response.status))\r\n            );\r\n};\r\n\r\nexport const joinEvent = event => (dispatch, getState) =>{\r\n    console.log(event);\r\n    axios\r\n\r\n        .put(`/api/events/${event.id}/join`,event,tokenConfig(getState))\r\n        .then(res=>\r\n            dispatch({\r\n                type: JOIN_EVENT,\r\n                payload: res.data.event,\r\n                id: 'SUCCESS_JOIN'\r\n           \r\n            }))\r\n            .catch(err => dispatch(returnErrors(err.response.data, err.response.status,'JOIN_FAIL'))\r\n            );\r\n};\r\n\r\nexport const deleteEvent = id => (dispatch,getState) =>{\r\n    axios\r\n        .delete(`/api/events/${id}`, tokenConfig(getState))\r\n        .then(res =>{\r\n            dispatch({\r\n                type:DELETE_EVENT,\r\n                payload: res.data.event,\r\n                id: 'SUCCESS_DELETE'\r\n            })\r\n            window.location.reload();\r\n        })\r\n            \r\n        .catch(err => dispatch(returnErrors(err.response.data, err.response.status,'DELETE_EVENT_FAIL'))\r\n        );\r\n    \r\n    \r\n\r\n};\r\n\r\n\r\n\r\nexport const setEventsLoading = () =>\r\n{\r\n    return{\r\n        type: EVENTS_LOADING\r\n    };\r\n};","\r\nimport {GET_EVENTS, DELETE_EVENT, ADD_EVENT, EVENTS_LOADING, GET_EVENT, JOIN_EVENT} from '../actions/types';\r\nconst initialState = {\r\n    items: [],\r\n    event:[],\r\n    loading: false,\r\n    user:localStorage.getItem('user'),\r\n    id:null\r\n}\r\n\r\nexport default function(state= initialState, action){\r\n    switch(action.type){\r\n        case GET_EVENTS:\r\n            return{\r\n                ...state,\r\n                items: [...action.payload, ...state.items],\r\n         \r\n            };\r\n        case JOIN_EVENT:\r\n            return{\r\n                ...state,\r\n                event: action.payload,\r\n                \r\n                id:action.id\r\n                \r\n            }\r\n        case GET_EVENT:\r\n            return{\r\n                ...state,\r\n                event: action.payload,\r\n                items: [...state.items],\r\n                \r\n                \r\n            }\r\n        case DELETE_EVENT:\r\n            return{\r\n                ...state,\r\n                items: state.items.filter(item => item.id !== action.payload),\r\n                event: action.payload,\r\n                id: action.id\r\n            };\r\n        case ADD_EVENT:\r\n            return{\r\n                ...state,\r\n                items: [action.payload, ...state.items]\r\n            };\r\n        case EVENTS_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {GET_ERRORS, CLEAR_ERRORS} from '../actions/types';\r\n\r\nconst initialState = {\r\n    msg:{},\r\n    status: null,\r\n    id: null\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case GET_ERRORS:{\r\n            return {\r\n                msg:action.payload.msg,\r\n                status:action.payload.status,\r\n                id: action.payload.id\r\n            };\r\n        }\r\n        case CLEAR_ERRORS:{\r\n            return{\r\n                msg:{},\r\n                status:null,\r\n                id:null,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    USER_LOADED,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_FAIL,\r\n    REGISTER_SUCCESS,\r\n    EDIT_SUCCESS\r\n\r\n} from \"../actions/types\"\r\n\r\nconst initialState = {\r\n    token: localStorage.getItem('token'),\r\n    isAuthenticated: null,\r\n    isLoading: false,\r\n    user:null,\r\n    user_edit:null\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case USER_LOADING:\r\n            return{\r\n                ...state,\r\n                isLoading:true\r\n            };\r\n        case USER_LOADED:\r\n            return{\r\n                ...state,\r\n                isAuthenticated:true,\r\n                isLoading: false,\r\n                user: action.payload\r\n            };\r\n        case LOGIN_SUCCESS:\r\n        case REGISTER_SUCCESS:\r\n            localStorage.setItem('token', action.payload.token);\r\n            localStorage.setItem('user',JSON.stringify(action.payload.user));\r\n            return{\r\n                ...state,\r\n                ...action.payload,\r\n                isAuthenticated:true,\r\n                isLoading: false                \r\n            }\r\n        case LOGIN_FAIL:\r\n        case AUTH_ERROR:\r\n        case LOGOUT_SUCCESS:\r\n        case REGISTER_FAIL:\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n            return{\r\n                ...state,\r\n                token:null,\r\n                user: null,\r\n                isAuthenticated:false,\r\n                isLoading:false\r\n            }\r\n        case EDIT_SUCCESS:\r\n            return{\r\n                ...state,\r\n                user_edit:action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers } from 'redux';\r\nimport eventReducer from './eventReducer';\r\nimport errorReducer from './errorReducer';\r\nimport authReducer from './authReducer';\r\n\r\n\r\nexport default combineReducers({\r\n    item: eventReducer,\r\n    error: errorReducer,\r\n    auth: authReducer\r\n});","import {createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState ={};\r\nconst middleware = [thunk];\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\nconst store = createStore(rootReducer, initialState,composeEnhancers(\r\n    applyMiddleware(...middleware)\r\n));\r\n\r\nexport default store;","import React, {Component} from 'react';\r\nimport {\r\n    Button, \r\n    Modal, \r\n    ModalHeader, \r\n    ModalBody, \r\n\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    NavLink,\r\n    Alert\r\n} from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {login} from '../../actions/authActions';\r\nimport {clearErrors} from '../../actions/errorActions';\r\nimport {getEvents} from '../../actions/eventAction';\r\nimport store from '../../store';\r\nclass LoginModal extends Component{\r\n    state = {\r\n        modal:false,\r\n       \r\n        email:'',\r\n        password:'',\r\n        msg:null\r\n    };\r\n    \r\n    static propTypes ={\r\n        isAuthenticated:PropTypes.bool,\r\n        error:PropTypes.object.isRequired,\r\n        login: PropTypes.func.isRequired,\r\n        clearErrors: PropTypes.func.isRequired\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        const {error, isAuthenticated} = this.props;\r\n        if(error != prevProps.error){\r\n            //check for register error\r\n            if(error.id === 'LOGIN_FAIL'){\r\n                this.setState({msg:[error.msg.email, error.msg.password, error.msg.msg]});\r\n            }else{\r\n                this.setState({msg:null})\r\n            }\r\n        }\r\n        //if authenticated then close the modal\r\n        if(this.state.modal){\r\n            if(isAuthenticated){\r\n                //store.dispatch(getEvents());\r\n                this.toggle();\r\n                \r\n            }\r\n        }\r\n      \r\n    }\r\n    toggle = () => {\r\n        //to clear errors\r\n        this.props.clearErrors();\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        const {email, password} = this.state;\r\n        const user = {\r\n            email, \r\n            password\r\n        }\r\n        //login attempt\r\n        this.props.login(user);\r\n       \r\n\r\n \r\n    };\r\n    render(){\r\n        return(\r\n            <div>\r\n              <NavLink onClick={this.toggle} href=\"#\">\r\n                Log in \r\n              </NavLink>\r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle = {this.toggle}\r\n                >\r\n                    <ModalHeader toggle={this.toggle}> Login</ModalHeader>\r\n                    <ModalBody>\r\n                        {this.state.msg ? (<Alert color='danger'>{this.state.msg}</Alert>):null}\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <FormGroup>\r\n                               \r\n                                <Label for=\"email\">email</Label>\r\n                                    <Input\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    id=\"email\"\r\n                                    placeholder=\"email\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.onChange}\r\n                                    >\r\n\r\n                                    </Input>\r\n                                    {this.state.msg ? (<Alert color='danger'>{this.state.msg[0]}</Alert>):null}\r\n                                <Label for=\"password\">Password</Label>\r\n                                    <Input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    id=\"password\"\r\n                                    placeholder=\"password\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.onChange}\r\n                                    >\r\n\r\n                                    </Input>\r\n                                    {this.state.msg ? (<Alert color='danger'>{this.state.msg[1]}</Alert>):null}\r\n                                    <Button\r\n                                    color =\"dark\"\r\n                                    style={{marginTop:'2rem'}} block\r\n                                    >\r\n                                        Login\r\n                                    </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n   isAuthenticated: state.auth.isAuthenticated,\r\n   error: state.error\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {login, clearErrors}\r\n)(LoginModal);","import React, {Component} from 'react';\r\nimport {\r\n    Button, \r\n    Modal, \r\n    ModalHeader, \r\n    ModalBody, \r\n\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    NavLink,\r\n    Alert\r\n} from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {editUser} from '../actions/authActions';\r\nimport {clearErrors} from '../actions/errorActions';\r\nimport {getEvents} from '../actions/eventAction';\r\nimport store from '../store';\r\nclass EditProfileModal extends Component{\r\n    state = {\r\n        modal:false,\r\n        isOrganiser:null,\r\n        msg:null\r\n    };\r\n    \r\n    static propTypes ={\r\n        isAuthenticated:PropTypes.bool,\r\n        error:PropTypes.object.isRequired,\r\n        auth:PropTypes.object.isRequired,\r\n        clearErrors: PropTypes.func.isRequired\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        const {error} = this.props;\r\n        if(error != prevProps.error){\r\n            //check for register error\r\n            if(error.id === 'EDIT_USER_FAIL'){\r\n                this.setState({msg:[error.msg.msg]});\r\n            }else{\r\n                this.setState({msg:null})\r\n                // if(this.state.modal){\r\n                //     this.toggle();\r\n                // }\r\n            }\r\n        }\r\n        \r\n      \r\n    }\r\n    toggle = () => {\r\n        //to clear errors\r\n        this.props.clearErrors();\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        const auth = this.props.auth;\r\n        const {name, isOrganiser} = this.state;\r\n        const user = {\r\n            id:auth.user._id,\r\n            name, \r\n            isOrganiser\r\n        }\r\n        //login attempt\r\n        console.log(user);\r\n        this.props.editUser(user);\r\n       //if submitted then close the modal\r\n       if(this.state.modal){\r\n            this.toggle();\r\n            window.location.reload();\r\n        }\r\n\r\n \r\n    };\r\n    render(){\r\n        return(\r\n            <div>\r\n              <NavLink onClick={this.toggle} href=\"#\">\r\n                Edit User Profile\r\n              </NavLink>\r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle = {this.toggle}\r\n                >\r\n                    <ModalHeader toggle={this.toggle}> Login</ModalHeader>\r\n                    <ModalBody>\r\n                        {this.state.msg ? (<Alert color='danger'>{this.state.msg}</Alert>):null}\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <FormGroup>\r\n                               \r\n                                <Label for=\"name\">name</Label>\r\n                                    <Input\r\n                                    type=\"name\"\r\n                                    name=\"name\"\r\n                                    id=\"name\"\r\n                                    placeholder=\"name\"\r\n                                    className=\"mb-3\"\r\n                                    onChange={this.onChange}\r\n                                    >\r\n\r\n                                    </Input>\r\n                                    <Label for=\"organiser\">\r\n                                            \r\n                                          &nbsp;&nbsp;  <Input\r\n                                            type=\"radio\"\r\n                                            name=\"isOrganiser\"\r\n                                            id=\"organiser\"\r\n                                            className=\"mb-3\"\r\n                                            value='true'\r\n                                            onChange={this.onChange}\r\n                                            >\r\n                                            \r\n                                            </Input>\r\n                                            Organiser\r\n                                        </Label>\r\n                                       <br/>\r\n                                        \r\n                                    \r\n                                        <Label for=\"player\">\r\n                                            \r\n                                        &nbsp;&nbsp;    <Input\r\n                                            type=\"radio\"\r\n                                            name=\"isOrganiser\"\r\n                                            id=\"player\"\r\n                                            className=\"mb-3\"\r\n                                            value='false'\r\n                                            onChange={this.onChange}\r\n                                            >\r\n                                            \r\n                                            </Input>\r\n                                            Player\r\n                                        </Label>\r\n                                \r\n                                    <Button\r\n                                    color =\"dark\"\r\n                                    style={{marginTop:'2rem'}} block\r\n                                    >\r\n                                    Update\r\n                                    </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n   error: state.error\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {editUser, clearErrors}\r\n)(EditProfileModal);","import React, {Component, Fragment} from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Row,\r\n    Col,\r\n    Container,\r\n    Button\r\n} from 'reactstrap';\r\n\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport RegisterModal from './auth/RegisterModal';\r\nimport Logout from './auth/Logout';\r\nimport LoginModal from './auth/LoginModal';\r\nimport EditProfileModal from './EditProfileModal';\r\n\r\nclass AppNavBar extends Component {\r\n    state = {\r\n        isOpen:false\r\n    }\r\n\r\n    static propTypes={\r\n        auth: PropTypes.object.isRequired\r\n    }\r\n\r\n    toggle = () =>{\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n    render(){\r\n        const { isAuthenticated, user} =this.props.auth;\r\n    \r\n\r\n        const authLinks = (\r\n            <Fragment>\r\n                 <Col></Col>\r\n                    <Col>                    \r\n                        {/* <img className=\"logo-margin-afterlogin\"src={require('./assets/logo.png')}/> */}\r\n                    </Col>\r\n                    <Col>\r\n                    <Row><br/><br/><br/><br/><br/><br/><br/><br/><br/></Row>\r\n                    <div className=\"login-margin-afterlogin\">\r\n                    <h2>\r\n                            <strong>{user?`Welcome ${user.name} !!!`:``}</strong>\r\n                        </h2>\r\n                        <Row>\r\n                            <Button color=\"success\"><EditProfileModal/></Button> &nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <Button color=\"danger\"><Logout/></Button> \r\n                        </Row>\r\n                    </div>\r\n                        \r\n                        \r\n                    </Col>\r\n                    <Col>\r\n\r\n                    </Col>\r\n            </Fragment>\r\n        );\r\n\r\n        const guestLinks = (\r\n            <Fragment>\r\n                <Col md={6}>                    \r\n                    {/* <img className=\"logo-margin\" src={require('./assets/logo.png')}/> */}\r\n                </Col>\r\n                <Col md={6}>\r\n                    <Fragment>\r\n                            <Row className=\"login-margin\">\r\n                                <Button color=\"primary\" style={{color:\"white\"}}><LoginModal/></Button>\r\n                                <h6 className=\"or\">OR</h6>\r\n                                <Button color=\"danger\"><RegisterModal /></Button>\r\n                            </Row>\r\n                    </Fragment>\r\n                </Col>\r\n            </Fragment>\r\n            \r\n        );\r\n\r\n        return(\r\n            <div className=\"page-body-image\">\r\n                \r\n                        <Navbar color=\"light\" dark expand=\"sm\" className=\"mb-5\">\r\n                            <NavbarBrand href =\"/\">\r\n                                <img src={require('./assets/logo.png')} style={{width:\"120px\"}}/>\r\n                            </NavbarBrand>\r\n                            <NavbarToggler onClick={this.toggle} />\r\n                            <Collapse isOpen={this.state.isOpen} navbar>\r\n                                <Nav className=\"ml-auto\" navbar>\r\n                                    \r\n                                    {/* <NavItem>\r\n                                        <NavLink > Events</NavLink>\r\n                                    </NavItem>\r\n                                    <NavItem>\r\n                                        <NavLink > How it works?</NavLink>\r\n                                    </NavItem>\r\n                                    <NavItem>\r\n                                        <NavLink > Contact us!</NavLink>\r\n                                    </NavItem> */}\r\n                                    \r\n                                \r\n                                </Nav>\r\n                            </Collapse>\r\n                    </Navbar>\r\n\r\n                <Row>\r\n                    {isAuthenticated? authLinks:guestLinks}\r\n                </Row>\r\n            \r\n        </div>\r\n        );\r\n\r\n        \r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(AppNavBar);","\r\nimport { ListGroupItem, Button, Alert,Col, Row, Label } from 'reactstrap';\r\nimport React, { Component } from 'react';\r\nimport {CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {getEvents, deleteEvent, joinEvent} from '../actions/eventAction';\r\nimport {clearErrors} from '../actions/errorActions';\r\n\r\nclass EventItem extends Component {\r\n    componentDidMount(){\r\n        this.props.getEvents();\r\n    }\r\n    onDeleteClick = (id) =>{\r\n        this.props.deleteEvent(id);\r\n\r\n    }\r\n      \r\n    onJoinClick = (id) =>{\r\n        console.log('join cicked', id);\r\n        \r\n        let user = JSON.parse(localStorage.getItem('user'));\r\n        console.log(user);\r\n        const event = {\r\n            id: id,\r\n            user_id: user.id,\r\n            user_name: user.name,\r\n            }\r\n        this.props.joinEvent(event);\r\n    }\r\n    static propTypes ={\r\n        //isAuthenticated:PropTypes.bool,\r\n        error:PropTypes.object.isRequired,\r\n        //login: PropTypes.func.isRequired,\r\n        clearErrors: PropTypes.func.isRequired\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        \r\n        const {error} = this.props;\r\n        const{item} = this.props;\r\n        if(error != prevProps.error){\r\n            //check for join event error\r\n            if(error.id === 'JOIN_FAIL'){\r\n                this.setState({msg:error.msg.msg,\r\n                event:{\r\n                    name: error.msg.event.event_name}\r\n\r\n            });\r\n            }else if(error.id === 'DELETE_EVENT_FAIL'){\r\n                this.setState({msg:error.msg.msg,\r\n                     event:{\r\n                         name: error.msg.event.event_name}\r\n    \r\n                });\r\n            }else if (item.event.id === 'SUCCESS_JOIN'){\r\n                \r\n                this.setState({msg:'You have successfully joined.'  ,event:{\r\n                    name: error.msg.event.event_name}})\r\n                \r\n            }\r\n            else{\r\n                \r\n                this.setState({msg:null  ,event:null})\r\n                \r\n            }\r\n        }\r\n        else if(item != prevProps.item){\r\n            if(item.id === 'SUCCESS_JOIN'){\r\n                this.setState({msg:'You have successfully joined the event:'  ,event:{\r\n                    name: item.event.event_name}})\r\n            }\r\n            else if(item.id === 'SUCCESS_DELETE'){\r\n                this.setState({msg:'You have successfully deleted the event:'  ,event:{\r\n                    name: item.event.event_name}})\r\n            }\r\n        }\r\n     }\r\n\r\n    render() {\r\n        const { items } = this.props.item;\r\n        return (\r\n            <div>\r\n                 <TransitionGroup className=\"event-list\">\r\n                 \r\n                        {items && items.map(({_id, event_name,sport_type,players_required,venue,additional_info,imageURL,start}) =>\r\n                            <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n                                \r\n\r\n\r\n                                <ListGroupItem style={{marginBottom:\"2%\"}}>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <img src={imageURL} style={{width:\"80%\"}} />\r\n                                        </Col>\r\n                                        <Col>\r\n                                                <h2>{event_name}</h2>\r\n                                                <br/>\r\n                                                <Label><strong> Sports Type :</strong></Label>{sport_type}\r\n                                                <br/>\r\n                                                <Label><strong> Players Required :</strong></Label>{players_required}\r\n                                                <br/>\r\n                                                <Label><strong> Venue :</strong></Label>{venue}\r\n                                                <br/>\r\n                                                <Label><strong> Additional Info :</strong></Label>{additional_info}\r\n                                                <br/>\r\n                                                <Label><strong> Date :</strong></Label>{start}\r\n                                                <br/>\r\n                                                <Button \r\n                                                className=\"join-btn\" \r\n                                                color =\"danger\" \r\n                                                \r\n                                                onClick={this.onDeleteClick.bind(this,_id)}\r\n                                                > <i class=\"fa fa-trash\"></i>&nbsp;Delete</Button>\r\n                                                <Button \r\n                                                className=\"join-btn\" \r\n                                                color =\"danger\" \r\n                                                onClick={this.onJoinClick.bind(this,_id)}\r\n                                                > <i class=\"fa fa-user-plus\"></i> Join</Button> &nbsp;\r\n                                            {(this.state.msg && (this.state.event.name === event_name) )? \r\n                                            (<Alert color='danger'>{this.state.msg} {this.state.event.name}</Alert>):\r\n                                            null}                         \r\n                                        </Col>\r\n                                    </Row>\r\n                                    \r\n                                    \r\n                                                     \r\n                                </ListGroupItem>\r\n                                    \r\n                            </CSSTransition>\r\n                        )}\r\n                        \r\n                    </TransitionGroup>\r\n                    \r\n            </div>\r\n        )\r\n    }\r\n}\r\nEventItem.propTypes = {\r\n    getEvents: PropTypes.func.isRequired,\r\n    item: PropTypes.object.isRequired,\r\n    clearErrors: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item,\r\n    event: state.event, \r\n    auth: state.auth,\r\n    user: state.auth.user,\r\n    error: state.error\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,{getEvents,clearErrors,joinEvent,deleteEvent})\r\n    (EventItem);","import React, {Component} from'react';\r\nimport {Container, ListGroup, ListGroupItem, Button, Alert, Toast } from 'reactstrap';\r\nimport {CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\n\r\nimport {connect} from 'react-redux';\r\nimport {getEvents, deleteEvent, joinEvent} from '../actions/eventAction';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {clearErrors} from '../actions/errorActions';\r\n\r\nimport EventItem from './EventItem';\r\n\r\nclass EventList extends Component{\r\n    state = {\r\n        msg:null,\r\n        event:{\r\n            _id:null,\r\n            event_name:null\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        //store.dispatch(loadUser());\r\n        this.props.getEvents();\r\n        this.props.clearErrors();\r\n       \r\n    }\r\n   \r\n    onDeleteClick = (id) =>{\r\n        this.props.deleteEvent(id);\r\n\r\n    }\r\n      \r\n    onJoinClick = (id) =>{\r\n        console.log('join cicked', id);\r\n        Toast.success('Joined');\r\n        let user = JSON.parse(localStorage.getItem('user'));\r\n        console.log(user);\r\n        const event = {\r\n            id: id,\r\n            user_id: user.id,\r\n            user_name: user.name,\r\n            }\r\n        this.props.joinEvent(event);\r\n    }\r\n    static propTypes ={\r\n        //isAuthenticated:PropTypes.bool,\r\n        error:PropTypes.object.isRequired,\r\n        //login: PropTypes.func.isRequired,\r\n        clearErrors: PropTypes.func.isRequired\r\n    }\r\n    // componentDidUpdate(prevProps){\r\n       \r\n    //     // const {error} = this.props;\r\n    //     // if(error != prevProps.error){\r\n    //     //     //check for join event error\r\n    //     //     if(error.id === 'JOIN_FAIL'){\r\n    //     //         this.setState({msg:error.msg.msg,\r\n    //     //         event:{\r\n    //     //             name: error.msg.event.event_name}\r\n\r\n    //     //     });\r\n    //     //     }else{\r\n    //     //         this.setState({msg:null  ,event:null})\r\n    //     //     }\r\n    //     // }\r\n    //  }\r\n\r\n    render() {\r\n\r\n        const { items } = this.props.item;\r\n        //const {user} = this.props.auth;\r\n       \r\n        return(\r\n            <Container>\r\n               <br/>\r\n                <ListGroup>\r\n               \r\n                   <EventItem items= {items}/>\r\n                </ListGroup>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nEventList.propTypes = {\r\n    getEvents: PropTypes.func.isRequired,\r\n    item: PropTypes.object.isRequired,\r\n    clearErrors: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item,\r\n    event: state.event, \r\n    auth: state.auth,\r\n    user: state.auth.user,\r\n    error: state.error\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {getEvents, deleteEvent, joinEvent,clearErrors})\r\n    (EventList);","import React, {Component} from 'react';\r\nimport {\r\n    Button, \r\n    Modal, \r\n    ModalHeader, \r\n    ModalBody, \r\n    \r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input\r\n} from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {addEvent} from '../actions/eventAction';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nclass EventModal extends Component{\r\n    state = {\r\n        modal:false,\r\n        event_name: '',\r\n        sport_type: '',\r\n        players_required:'',\r\n        venue: '',\r\n        additional_info:'',\r\n        imageURL:'',\r\n        start: '',\r\n        \r\n\r\n    }\r\n    static propTypes = {\r\n\r\n        auth: PropTypes.object.isRequired,\r\n        \r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const newEvent = {\r\n            //id: uuid(),\r\n            event_name: this.state.event_name,\r\n            sport_type: this.state.sport_type,\r\n            players_required: this.state.players_required,\r\n            venue: this.state.venue,\r\n            additional_info: this.state.additional_info,\r\n            imageURL: this.state.imageURL,\r\n            start: this.state.start\r\n           \r\n\r\n        }\r\n\r\n        //add item via additem action\r\n        this.props.addEvent(newEvent);\r\n       \r\n        this.toggle();//closing modal\r\n    }\r\n    render(){\r\n        const{isAuthenticated, user} = this.props.auth;\r\n       \r\n        const isOrganiser = user?user.isOrganiser:'';\r\n\r\n        //add new event available only for organiser\r\n        const organiserLinks=(\r\n            <div>\r\n                 <br/>\r\n                <Button\r\n                    color=\"dark\"\r\n                    style={{marginBottom: '2rem',marginLeft:\"1.5%\"}}\r\n                    onClick={this.toggle}\r\n                > <i class=\"fa fa-plus\"></i> Add Event</Button>\r\n            </div>\r\n           \r\n            \r\n        );\r\n        return(\r\n            <div>\r\n               {isOrganiser?organiserLinks:null}\r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle = {this.toggle}\r\n                >\r\n                    <ModalHeader toggle={this.toggle}> Create a new event</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"item\">Event Name:</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"event_name\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Add event name\"\r\n                                    onChange={this.onChange}\r\n                                    >\r\n\r\n                                </Input>\r\n                                <Label for=\"item\">Sport Type:</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"sport_type\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Add sport type\"\r\n                                    onChange={this.onChange}\r\n                                    >\r\n\r\n                                </Input>\r\n                                <Label for=\"item\">Players required:</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"players_required\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Number of players\"\r\n                                    onChange={this.onChange}\r\n                                    >\r\n\r\n                                </Input>\r\n                                <Label for=\"item\">Event Venue:</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"venue\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Add event venue\"\r\n                                    onChange={this.onChange}\r\n                                    >\r\n\r\n                                </Input>\r\n                                <Label for=\"item\">Additional Info:</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"additional_info\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Any additional info?\"\r\n                                    onChange={this.onChange}\r\n                                    >\r\n\r\n                                </Input>\r\n                                <Label for=\"item\">Image url:</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"imageURL\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Image\"\r\n                                    onChange={this.onChange}\r\n                                    >\r\n\r\n                                </Input>\r\n                                <Label for=\"item\">Start date:</Label>\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    name=\"start\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Start date/time\"\r\n                                    onChange={this.onChange}\r\n                                    >\r\n\r\n                                </Input>\r\n\r\n\r\n\r\n\r\n\r\n                                    <Button\r\n                                    color =\"dark\"\r\n                                    style={{marginTop:'2rem'}} block\r\n                                    >\r\n                                        Add Event\r\n                                    </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    // event_name : state.event_name,\r\n    // venue :state.venue,\r\n    auth :state.auth,\r\n    item :state.item,\r\n   \r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {addEvent}\r\n)\r\n(EventModal);","import React, {Component} from 'react';\r\nimport AppNavBar from './components/AppHome';\r\nimport EventList from './components/EventList';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css';\r\n\r\nimport EventModal from './components/eventModal';\r\n\r\nimport {Container} from 'reactstrap';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nimport {loadUser} from'./actions/authActions';\r\n\r\nclass App extends Component {\r\n  componentDidMount(){\r\n    store.dispatch(loadUser());\r\n    \r\n  }\r\n  render(){\r\n    return (\r\n      <Provider store ={store} >\r\n      \r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <AppNavBar/> \r\n            <Container>\r\n              <EventModal/>\r\n              <EventList/>\r\n            </Container>\r\n           \r\n        \r\n          </header>\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}